import unittest2 as unittest
import more_specifics_analysis
import pandas as pd


class TestMoreSpecificsAnalysis(unittest.TestCase):

    def test_get_withdraw_indexes(self):
        result = more_specifics_analysis.get_withdraw_indexes(pd.DataFrame(
            {'TIME': ['1', '2', '3', '3', '4', '5'],
             'TYPE': ['W', 'A', 'W', 'A', 'W', 'W'],
             'MONITOR': ['192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0'],
             'AS': ['123', '6001', '342', '1231', '3254', '43265'],
             'PREFIX': ['193.169.130.0/23', '118.184.200.0/21', '118.184.224.0/21', '118.184.232.0/21',
                        '78.130.255.0/24', '213.145.111.0/24'],
             'AS_PATH': [['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050'],
                         ['45896', '3356', '174', '20473', '18257'], ['45896', '3356', '174', '20473', '18257'],
                         ['45896', '3356', '174', '20473', '18257'], ['45896', '3356', '60262', '207214'],
                         ['45896', '3356', '60262', '207214']]}))

        self.assertEqual(result, [0, 2, 4, 5])

    def test_delete_withdraw_updates(self):
        result = more_specifics_analysis.delete_withdraw_updates(pd.DataFrame(
            {'TIME': ['1', '2', '3', '3', '4', '5'],
             'TYPE': ['W', 'A', 'W', 'A', 'W', 'W'],
             'MONITOR': ['192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0'],
             'AS': ['123', '6001', '342', '1231', '3254', '43265'],
             'PREFIX': ['193.169.130.0/23', '118.184.200.0/21', '118.184.224.0/21', '118.184.232.0/21',
                        '78.130.255.0/24', '213.145.111.0/24'],
             'AS_PATH': ["['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '60262', '207214']",
                         "['45896', '3356', '60262', '207214']"]}))

        expected_result = pd.DataFrame(
            {'TIME': ['2', '3'],
             'TYPE': ['A', 'A'],
             'MONITOR': ['192.168.0.0', '192.168.0.0'],
             'AS': ['6001', '1231'],
             'PREFIX': ['118.184.200.0/21', '118.184.232.0/21'],
             'AS_PATH': ["['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '174', '20473', '18257']"]})

        self.assertEqual(result['TYPE'].values.all(), expected_result['TYPE'].values.all())

    def test_get_IPv_type_indexes(self):
        result_IPv4_indexes, result_IPv6_indexes = more_specifics_analysis.get_IPv_type_indexes(pd.DataFrame(
            {'TIME': ['1', '2', '3', '3', '4', '5'],
             'TYPE': ['A', 'A', 'A', 'A', 'A', 'A'],
             'MONITOR': ['2a01:2a8::3', '192.168.0.0', '193.0.0.56', '192.168.0.0', '192.168.0.0', '192.168.0.0'],
             'AS': ['123', '6001', '342', '1231', '3254', '43265'],
             'PREFIX': ['2001:7fb:fe05::/48', '118.184.200.0/21', '2a06:e881:1400::/47', '118.184.232.0/21',
                        '78.130.255.0/24', '213.145.111.0/24'],
             'AS_PATH': ["['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '60262', '207214']",
                         "['45896', '3356', '60262', '207214']"]}))

        self.assertEqual(result_IPv4_indexes, [1, 3, 4, 5])
        self.assertEqual(result_IPv6_indexes, [0, 2])

    def test_separate_IPv_types(self):
        result_IPv4_A, result_IPv6_A = more_specifics_analysis.separate_IPv_types(pd.DataFrame(
            {'TIME': ['1', '2', '3', '3', '4', '5'],
             'TYPE': ['A', 'A', 'A', 'A', 'A', 'A'],
             'MONITOR': ['2a01:2a8::3', '192.168.0.0', '193.0.0.56', '192.168.0.0', '192.168.0.0', '192.168.0.0'],
             'AS': ['123', '6001', '342', '1231', '3254', '43265'],
             'PREFIX': ['2001:7fb:fe05::/48', '118.184.200.0/21', '2a06:e881:1400::/47', '118.184.232.0/21',
                        '78.130.255.0/24', '213.145.111.0/24'],
             'AS_PATH': ["['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '174', '20473', '18257']", "['45896', '3356', '60262', '207214']",
                         "['45896', '3356', '60262', '207214']"]}))

        expected_IPv4_A = pd.DataFrame(pd.DataFrame(
            {'TIME': ['2', '3', '4', '5'],
             'TYPE': ['A', 'A', 'A', 'A'],
             'MONITOR': ['192.168.0.0', '192.168.0.0', '192.168.0.0', '192.168.0.0'],
             'AS': ['6001', '1231', '3254', '43265'],
             'PREFIX': ['118.184.200.0/21', '118.184.232.0/21',
                        '78.130.255.0/24', '213.145.111.0/24'],
             'AS_PATH': ["['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '174', '20473', '18257']",
                         "['45896', '3356', '60262', '207214']",
                         "['45896', '3356', '60262', '207214']"]}))

        self.assertEqual(expected_IPv4_A['PREFIX'].all(), result_IPv4_A['PREFIX'].all())

        expected_IPv6_A = pd.DataFrame(
            {'TIME': ['1', '3'],
             'TYPE': ['A', 'A'],
             'MONITOR': ['2a01:2a8::3', '193.0.0.56'],
             'AS': ['123', '342'],
             'PREFIX': ['2001:7fb:fe05::/48', '2a06:e881:1400::/47'],
             'AS_PATH': ["['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                         "['45896', '3356', '174', '20473', '18257']"]})

        self.assertEqual(expected_IPv6_A['PREFIX'].all(), result_IPv6_A['PREFIX'].all())

    def test_get_IPv6_prefixes_seen_per_monitor(self):
        result = more_specifics_analysis.get_prefixes_seen_per_monitor({'TIME': ['1', '3', '4', '5'],
                                                                        'TYPE': ['A', 'A', 'A', 'A'],
                                                                        'MONITOR': ['193.0.0.55', '193.0.0.56',
                                                                                    '193.0.0.56', '193.0.0.56'],
                                                                        'AS': ['123', '342', '342', '342'],
                                                                        'PREFIX': ['118.184.200.0/21',
                                                                                   '118.184.200.0/21',
                                                                                   '78.130.255.0/24',
                                                                                   '213.145.111.0/24'],
                                                                        'AS_PATH': [
                                                                            "['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                                                                            "['45896', '3356', '174', '20473', '18257']",
                                                                            "['45896', '3356', '174', '20473', '18257']",
                                                                            "['45896', '3356', '174', '20473', '18257']"]})

        expected_result = {'193.0.0.55': ['118.184.200.0/21'],
                           '193.0.0.56': ['118.184.200.0/21',
                                          '78.130.255.0/24',
                                          '213.145.111.0/24']}

        self.assertEqual(result, expected_result)

    def test_get_IPv4_prefixes_seen_per_monitor(self):
        result = more_specifics_analysis.get_prefixes_seen_per_monitor({'TIME': ['1', '3', '4', '5'],
                                                                        'TYPE': ['A', 'A', 'A', 'A'],
                                                                        'MONITOR': ['2a01:2a8::3', '193.0.0.56',
                                                                                    '193.0.0.56', '193.0.0.56'],
                                                                        'AS': ['123', '342', '342', '342'],
                                                                        'PREFIX': ['2001:7fb:fe05::/48',
                                                                                   '2a06:e881:1400::/47',
                                                                                   '2a06:e881:1400::/47',
                                                                                   '2001:7fb:fe05::/48'],
                                                                        'AS_PATH': [
                                                                            "['45896', '6939', '15412', '29357', '43852', '43852', '43852', '43852', '43852', '21050']",
                                                                            "['45896', '3356', '174', '20473', '18257']",
                                                                            "['45896', '3356', '174', '20473', '18257']",
                                                                            "['45896', '3356', '174', '20473', '18257']"]})

        expected_result = {'2a01:2a8::3': ['2001:7fb:fe05::/48'],
                           '193.0.0.56': ['2a06:e881:1400::/47', '2001:7fb:fe05::/48']}

        self.assertEqual(result, expected_result)

    def test_count_prefixes_per_monitor(self):
        monitors, counts_per_monitor = more_specifics_analysis.count_prefixes_per_monitor({'2a01:2a8::3': ['2001:7fb:fe05::/48'],
                                                                     '193.0.0.56': ['2a06:e881:1400::/47',
                                                                                    '2001:7fb:fe05::/48']})

        self.assertEqual(monitors, ['193.0.0.56', '2a01:2a8::3'])
        self.assertEqual(counts_per_monitor, [2, 1])


if __name__ == '__main__':
    unittest.main()
